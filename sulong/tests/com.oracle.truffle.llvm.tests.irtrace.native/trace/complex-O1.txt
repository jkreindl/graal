<node id="0" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = main, SOURCE_NAME = main}source="O0.bc:main:1:1""><node id="1" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 0}"></node><node id="2" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"></node><node id="3" tags="LLVM_STATEMENT, PHI" properties="{SSA_TARGETS = [3, 4]}"><node id="4" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>0</output></node><input index="0" source="4">0</input><node id="5" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>0</output></node><input index="1" source="5">0</input></node><node id="6" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 2}"><node id="7" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="8" tags="CALL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32, ARGS_COUNT = 1}"><node id="9" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32 (i32), LLVM_NAME = valueFunc}"><output>Managed Pointer(target = 'valueFunc')</output></node><input index="1" source="9">Managed Pointer(target = 'valueFunc')</input><node id="10" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>0</output></node><input index="0" source="10">0</input><node id="11" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = valueFunc, SOURCE_NAME = valueFunc}source="O0.bc:valueFunc:1:1""><node id="12" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>0</output></node><input index="0" source="12">0</input><node id="13" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="14" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="15" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_UNSIGNED_LESS_THAN}"><node id="16" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>0</output></node><input index="0" source="16">0</input><node id="17" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>5</output></node><input index="1" source="17">5</input><output>true</output></node><input index="0" source="15">true</input></node></node><node id="18" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="19" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="19">true</input><output>true</output></node><node id="20" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 1, BLOCK_NAME = 3}"><node id="21" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i64, TARGET_SSA_NAME = 4}"><node id="22" tags="CAST, LLVM_EXPRESSION" properties="{VALUE_TYPE = i64, SOURCE_TYPE = i32, CAST_KIND = sext}"><node id="23" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>0</output></node><input index="0" source="23">0</input><output>0</output></node><input index="0" source="22">0</input></node><node id="24" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32*, TARGET_SSA_NAME = 5}"><node id="25" tags="GETELEMENTPTR, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, SOURCE_TYPE = [5 x i32]*, IS_INBOUND = true, INDEX_TYPES = [i64, i64], INDEX_VALUES = [0, DYNAMIC]}"><node id="26" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = [5 x i32]*, LLVM_NAME = switch.table.valueFunc}"><output>Native Pointer</output></node><input index="0" source="26">Native Pointer</input><node id="27" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i64, SOURCE_SSA_NAME = 4}"><output>0</output></node><input index="1" source="27">0</input><output>Native Pointer</output></node><input index="0" source="25">Native Pointer</input></node><node id="28" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="29" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="30" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32*, SOURCE_SSA_NAME = 5}"><output>Native Pointer</output></node><input index="0" source="30">Native Pointer</input><output>5</output></node><input index="0" source="29">5</input></node></node><node id="31" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="32" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>5</output></node><input index="0" source="32">5</input><output>5</output></node><output>5</output></node><output>5</output></node><input index="0" source="8">5</input></node><node id="33" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="34" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="35" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="35">Native Pointer</input><output>0</output></node><input index="0" source="34">0</input></node><node id="36" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 7}"><node id="37" tags="ADD, LLVM_EXPRESSION" properties="{nuw = false, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="38" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>0</output></node><input index="0" source="38">0</input><node id="39" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>0</output></node><input index="1" source="39">0</input><output>0</output></node><input index="0" source="37">0</input></node><node id="40" tags="CALL, LLVM_STATEMENT" properties="{ARGS_COUNT = 1}"><node id="41" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = void (i32), LLVM_NAME = voidFunc}"><output>Managed Pointer(target = 'voidFunc')</output></node><input index="1" source="41">Managed Pointer(target = 'voidFunc')</input><node id="42" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>5</output></node><input index="0" source="42">5</input><node id="43" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = voidFunc, SOURCE_NAME = voidFunc}source="O0.bc:voidFunc:1:1""><node id="44" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>5</output></node><input index="0" source="44">5</input><node id="45" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="46" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="47" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="48" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>5</output></node><input index="0" source="48">5</input><node id="49" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>10</output></node><input index="1" source="49">10</input><output>true</output></node><input index="0" source="47">true</input></node><node id="50" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 3}"><node id="51" tags="LLVM_EXPRESSION, OR" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="52" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>5</output></node><input index="0" source="52">5</input><node id="53" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>32</output></node><input index="1" source="53">32</input><output>37</output></node><input index="0" source="51">37</input></node><node id="54" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 4}"><node id="55" tags="LLVM_EXPRESSION, SELECT" properties="{VALUE_TYPE = i32}"><node id="56" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="56">true</input><node id="57" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>37</output></node><input index="1" source="57">37</input><node id="58" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>5</output></node><input index="2" source="58">5</input><output>37</output></node><input index="0" source="55">37</input></node><node id="59" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="60" tags="LLVM_EXPRESSION, SDIV" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="61" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>37</output></node><input index="0" source="61">37</input><node id="62" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>2</output></node><input index="1" source="62">2</input><output>18</output></node><input index="0" source="60">18</input></node><node id="63" tags="LLVM_STATEMENT, STORE" properties="{BYTE_SIZE = 8}"><node id="64" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="64">Native Pointer</input><node id="65" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>18</output></node><input index="1" source="65">18</input></node><node id="66" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 6}"><node id="67" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="68" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>37</output></node><input index="0" source="68">37</input><node id="69" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="1" source="69">-1</input><output>false</output></node><input index="0" source="67">false</input></node></node><node id="70" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="71" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 6}"><output>false</output></node><input index="0" source="71">false</input><output>false</output></node><node id="72" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 10}"></node><node id="73" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"></node></node></node><node id="74" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 8}"><node id="75" tags="ADD, LLVM_EXPRESSION" properties="{nuw = true, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="76" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>0</output></node><input index="0" source="76">0</input><node id="77" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>1</output></node><input index="1" source="77">1</input><output>1</output></node><input index="0" source="75">1</input></node><node id="78" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 9}"><node id="79" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_EQUAL}"><node id="80" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>1</output></node><input index="0" source="80">1</input><node id="81" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>6</output></node><input index="1" source="81">6</input><output>false</output></node><input index="0" source="79">false</input></node></node><node id="82" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="83" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 9}"><output>false</output></node><input index="0" source="83">false</input><output>false</output></node><node id="84" tags="LLVM_STATEMENT, PHI" properties="{SSA_TARGETS = [3, 4]}"><node id="85" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 7}"><output>0</output></node><input index="0" source="85">0</input><node id="86" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>1</output></node><input index="1" source="86">1</input></node><node id="6" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 2}"><node id="7" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="8" tags="CALL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32, ARGS_COUNT = 1}"><node id="9" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32 (i32), LLVM_NAME = valueFunc}"><output>Managed Pointer(target = 'valueFunc')</output></node><input index="1" source="9">Managed Pointer(target = 'valueFunc')</input><node id="10" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>1</output></node><input index="0" source="10">1</input><node id="11" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = valueFunc, SOURCE_NAME = valueFunc}source="O0.bc:valueFunc:1:1""><node id="12" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>1</output></node><input index="0" source="12">1</input><node id="87" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="88" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="89" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_UNSIGNED_LESS_THAN}"><node id="90" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>1</output></node><input index="0" source="90">1</input><node id="91" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>5</output></node><input index="1" source="91">5</input><output>true</output></node><input index="0" source="89">true</input></node></node><node id="92" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="93" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="93">true</input><output>true</output></node><node id="20" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 1, BLOCK_NAME = 3}"><node id="21" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i64, TARGET_SSA_NAME = 4}"><node id="22" tags="CAST, LLVM_EXPRESSION" properties="{VALUE_TYPE = i64, SOURCE_TYPE = i32, CAST_KIND = sext}"><node id="23" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>1</output></node><input index="0" source="23">1</input><output>1</output></node><input index="0" source="22">1</input></node><node id="24" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32*, TARGET_SSA_NAME = 5}"><node id="25" tags="GETELEMENTPTR, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, SOURCE_TYPE = [5 x i32]*, IS_INBOUND = true, INDEX_TYPES = [i64, i64], INDEX_VALUES = [0, DYNAMIC]}"><node id="26" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = [5 x i32]*, LLVM_NAME = switch.table.valueFunc}"><output>Native Pointer</output></node><input index="0" source="26">Native Pointer</input><node id="27" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i64, SOURCE_SSA_NAME = 4}"><output>1</output></node><input index="1" source="27">1</input><output>Native Pointer</output></node><input index="0" source="25">Native Pointer</input></node><node id="28" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="29" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="30" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32*, SOURCE_SSA_NAME = 5}"><output>Native Pointer</output></node><input index="0" source="30">Native Pointer</input><output>4</output></node><input index="0" source="29">4</input></node></node><node id="31" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="32" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>4</output></node><input index="0" source="32">4</input><output>4</output></node><output>4</output></node><output>4</output></node><input index="0" source="8">4</input></node><node id="33" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="34" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="35" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="35">Native Pointer</input><output>18</output></node><input index="0" source="34">18</input></node><node id="36" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 7}"><node id="37" tags="ADD, LLVM_EXPRESSION" properties="{nuw = false, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="38" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>18</output></node><input index="0" source="38">18</input><node id="39" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>0</output></node><input index="1" source="39">0</input><output>18</output></node><input index="0" source="37">18</input></node><node id="40" tags="CALL, LLVM_STATEMENT" properties="{ARGS_COUNT = 1}"><node id="41" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = void (i32), LLVM_NAME = voidFunc}"><output>Managed Pointer(target = 'voidFunc')</output></node><input index="1" source="41">Managed Pointer(target = 'voidFunc')</input><node id="42" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>4</output></node><input index="0" source="42">4</input><node id="43" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = voidFunc, SOURCE_NAME = voidFunc}source="O0.bc:voidFunc:1:1""><node id="44" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>4</output></node><input index="0" source="44">4</input><node id="94" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="95" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="96" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="97" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>4</output></node><input index="0" source="97">4</input><node id="98" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>10</output></node><input index="1" source="98">10</input><output>true</output></node><input index="0" source="96">true</input></node><node id="99" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 3}"><node id="100" tags="LLVM_EXPRESSION, OR" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="101" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>4</output></node><input index="0" source="101">4</input><node id="102" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>32</output></node><input index="1" source="102">32</input><output>36</output></node><input index="0" source="100">36</input></node><node id="103" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 4}"><node id="104" tags="LLVM_EXPRESSION, SELECT" properties="{VALUE_TYPE = i32}"><node id="105" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="105">true</input><node id="106" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>36</output></node><input index="1" source="106">36</input><node id="107" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>4</output></node><input index="2" source="107">4</input><output>36</output></node><input index="0" source="104">36</input></node><node id="108" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="109" tags="LLVM_EXPRESSION, SDIV" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="110" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>36</output></node><input index="0" source="110">36</input><node id="111" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>2</output></node><input index="1" source="111">2</input><output>18</output></node><input index="0" source="109">18</input></node><node id="112" tags="LLVM_STATEMENT, STORE" properties="{BYTE_SIZE = 8}"><node id="113" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="113">Native Pointer</input><node id="114" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>18</output></node><input index="1" source="114">18</input></node><node id="115" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 6}"><node id="116" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="117" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>36</output></node><input index="0" source="117">36</input><node id="118" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="1" source="118">-1</input><output>false</output></node><input index="0" source="116">false</input></node></node><node id="119" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="120" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 6}"><output>false</output></node><input index="0" source="120">false</input><output>false</output></node><node id="72" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 10}"></node><node id="73" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"></node></node></node><node id="74" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 8}"><node id="75" tags="ADD, LLVM_EXPRESSION" properties="{nuw = true, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="76" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>1</output></node><input index="0" source="76">1</input><node id="77" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>1</output></node><input index="1" source="77">1</input><output>2</output></node><input index="0" source="75">2</input></node><node id="78" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 9}"><node id="79" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_EQUAL}"><node id="80" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>2</output></node><input index="0" source="80">2</input><node id="81" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>6</output></node><input index="1" source="81">6</input><output>false</output></node><input index="0" source="79">false</input></node></node><node id="82" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="83" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 9}"><output>false</output></node><input index="0" source="83">false</input><output>false</output></node><node id="84" tags="LLVM_STATEMENT, PHI" properties="{SSA_TARGETS = [3, 4]}"><node id="85" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 7}"><output>18</output></node><input index="0" source="85">18</input><node id="86" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>2</output></node><input index="1" source="86">2</input></node><node id="6" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 2}"><node id="7" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="8" tags="CALL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32, ARGS_COUNT = 1}"><node id="9" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32 (i32), LLVM_NAME = valueFunc}"><output>Managed Pointer(target = 'valueFunc')</output></node><input index="1" source="9">Managed Pointer(target = 'valueFunc')</input><node id="10" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>2</output></node><input index="0" source="10">2</input><node id="11" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = valueFunc, SOURCE_NAME = valueFunc}source="O0.bc:valueFunc:1:1""><node id="12" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>2</output></node><input index="0" source="12">2</input><node id="87" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="88" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="89" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_UNSIGNED_LESS_THAN}"><node id="90" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>2</output></node><input index="0" source="90">2</input><node id="91" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>5</output></node><input index="1" source="91">5</input><output>true</output></node><input index="0" source="89">true</input></node></node><node id="92" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="93" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="93">true</input><output>true</output></node><node id="20" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 1, BLOCK_NAME = 3}"><node id="21" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i64, TARGET_SSA_NAME = 4}"><node id="22" tags="CAST, LLVM_EXPRESSION" properties="{VALUE_TYPE = i64, SOURCE_TYPE = i32, CAST_KIND = sext}"><node id="23" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>2</output></node><input index="0" source="23">2</input><output>2</output></node><input index="0" source="22">2</input></node><node id="24" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32*, TARGET_SSA_NAME = 5}"><node id="25" tags="GETELEMENTPTR, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, SOURCE_TYPE = [5 x i32]*, IS_INBOUND = true, INDEX_TYPES = [i64, i64], INDEX_VALUES = [0, DYNAMIC]}"><node id="26" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = [5 x i32]*, LLVM_NAME = switch.table.valueFunc}"><output>Native Pointer</output></node><input index="0" source="26">Native Pointer</input><node id="27" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i64, SOURCE_SSA_NAME = 4}"><output>2</output></node><input index="1" source="27">2</input><output>Native Pointer</output></node><input index="0" source="25">Native Pointer</input></node><node id="28" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="29" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="30" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32*, SOURCE_SSA_NAME = 5}"><output>Native Pointer</output></node><input index="0" source="30">Native Pointer</input><output>3</output></node><input index="0" source="29">3</input></node></node><node id="31" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="32" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>3</output></node><input index="0" source="32">3</input><output>3</output></node><output>3</output></node><output>3</output></node><input index="0" source="8">3</input></node><node id="33" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="34" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="35" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="35">Native Pointer</input><output>18</output></node><input index="0" source="34">18</input></node><node id="36" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 7}"><node id="37" tags="ADD, LLVM_EXPRESSION" properties="{nuw = false, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="38" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>18</output></node><input index="0" source="38">18</input><node id="39" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>18</output></node><input index="1" source="39">18</input><output>36</output></node><input index="0" source="37">36</input></node><node id="40" tags="CALL, LLVM_STATEMENT" properties="{ARGS_COUNT = 1}"><node id="41" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = void (i32), LLVM_NAME = voidFunc}"><output>Managed Pointer(target = 'voidFunc')</output></node><input index="1" source="41">Managed Pointer(target = 'voidFunc')</input><node id="42" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>3</output></node><input index="0" source="42">3</input><node id="43" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = voidFunc, SOURCE_NAME = voidFunc}source="O0.bc:voidFunc:1:1""><node id="44" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>3</output></node><input index="0" source="44">3</input><node id="94" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="95" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="96" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="97" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>3</output></node><input index="0" source="97">3</input><node id="98" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>10</output></node><input index="1" source="98">10</input><output>true</output></node><input index="0" source="96">true</input></node><node id="99" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 3}"><node id="100" tags="LLVM_EXPRESSION, OR" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="101" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>3</output></node><input index="0" source="101">3</input><node id="102" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>32</output></node><input index="1" source="102">32</input><output>35</output></node><input index="0" source="100">35</input></node><node id="103" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 4}"><node id="104" tags="LLVM_EXPRESSION, SELECT" properties="{VALUE_TYPE = i32}"><node id="105" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="105">true</input><node id="106" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>35</output></node><input index="1" source="106">35</input><node id="107" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>3</output></node><input index="2" source="107">3</input><output>35</output></node><input index="0" source="104">35</input></node><node id="108" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="109" tags="LLVM_EXPRESSION, SDIV" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="110" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>35</output></node><input index="0" source="110">35</input><node id="111" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>2</output></node><input index="1" source="111">2</input><output>17</output></node><input index="0" source="109">17</input></node><node id="112" tags="LLVM_STATEMENT, STORE" properties="{BYTE_SIZE = 8}"><node id="113" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="113">Native Pointer</input><node id="114" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>17</output></node><input index="1" source="114">17</input></node><node id="115" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 6}"><node id="116" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="117" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>35</output></node><input index="0" source="117">35</input><node id="118" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="1" source="118">-1</input><output>false</output></node><input index="0" source="116">false</input></node></node><node id="119" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="120" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 6}"><output>false</output></node><input index="0" source="120">false</input><output>false</output></node><node id="72" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 10}"></node><node id="73" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"></node></node></node><node id="74" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 8}"><node id="75" tags="ADD, LLVM_EXPRESSION" properties="{nuw = true, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="76" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>2</output></node><input index="0" source="76">2</input><node id="77" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>1</output></node><input index="1" source="77">1</input><output>3</output></node><input index="0" source="75">3</input></node><node id="78" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 9}"><node id="79" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_EQUAL}"><node id="80" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>3</output></node><input index="0" source="80">3</input><node id="81" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>6</output></node><input index="1" source="81">6</input><output>false</output></node><input index="0" source="79">false</input></node></node><node id="82" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="83" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 9}"><output>false</output></node><input index="0" source="83">false</input><output>false</output></node><node id="84" tags="LLVM_STATEMENT, PHI" properties="{SSA_TARGETS = [3, 4]}"><node id="85" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 7}"><output>36</output></node><input index="0" source="85">36</input><node id="86" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>3</output></node><input index="1" source="86">3</input></node><node id="6" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 2}"><node id="7" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="8" tags="CALL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32, ARGS_COUNT = 1}"><node id="9" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32 (i32), LLVM_NAME = valueFunc}"><output>Managed Pointer(target = 'valueFunc')</output></node><input index="1" source="9">Managed Pointer(target = 'valueFunc')</input><node id="10" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>3</output></node><input index="0" source="10">3</input><node id="11" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = valueFunc, SOURCE_NAME = valueFunc}source="O0.bc:valueFunc:1:1""><node id="12" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>3</output></node><input index="0" source="12">3</input><node id="87" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="88" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="89" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_UNSIGNED_LESS_THAN}"><node id="90" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>3</output></node><input index="0" source="90">3</input><node id="91" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>5</output></node><input index="1" source="91">5</input><output>true</output></node><input index="0" source="89">true</input></node></node><node id="92" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="93" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="93">true</input><output>true</output></node><node id="20" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 1, BLOCK_NAME = 3}"><node id="21" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i64, TARGET_SSA_NAME = 4}"><node id="22" tags="CAST, LLVM_EXPRESSION" properties="{VALUE_TYPE = i64, SOURCE_TYPE = i32, CAST_KIND = sext}"><node id="23" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>3</output></node><input index="0" source="23">3</input><output>3</output></node><input index="0" source="22">3</input></node><node id="24" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32*, TARGET_SSA_NAME = 5}"><node id="25" tags="GETELEMENTPTR, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, SOURCE_TYPE = [5 x i32]*, IS_INBOUND = true, INDEX_TYPES = [i64, i64], INDEX_VALUES = [0, DYNAMIC]}"><node id="26" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = [5 x i32]*, LLVM_NAME = switch.table.valueFunc}"><output>Native Pointer</output></node><input index="0" source="26">Native Pointer</input><node id="27" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i64, SOURCE_SSA_NAME = 4}"><output>3</output></node><input index="1" source="27">3</input><output>Native Pointer</output></node><input index="0" source="25">Native Pointer</input></node><node id="28" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="29" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="30" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32*, SOURCE_SSA_NAME = 5}"><output>Native Pointer</output></node><input index="0" source="30">Native Pointer</input><output>1</output></node><input index="0" source="29">1</input></node></node><node id="31" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="32" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>1</output></node><input index="0" source="32">1</input><output>1</output></node><output>1</output></node><output>1</output></node><input index="0" source="8">1</input></node><node id="33" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="34" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="35" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="35">Native Pointer</input><output>17</output></node><input index="0" source="34">17</input></node><node id="36" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 7}"><node id="37" tags="ADD, LLVM_EXPRESSION" properties="{nuw = false, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="38" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>17</output></node><input index="0" source="38">17</input><node id="39" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>36</output></node><input index="1" source="39">36</input><output>53</output></node><input index="0" source="37">53</input></node><node id="40" tags="CALL, LLVM_STATEMENT" properties="{ARGS_COUNT = 1}"><node id="41" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = void (i32), LLVM_NAME = voidFunc}"><output>Managed Pointer(target = 'voidFunc')</output></node><input index="1" source="41">Managed Pointer(target = 'voidFunc')</input><node id="42" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>1</output></node><input index="0" source="42">1</input><node id="43" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = voidFunc, SOURCE_NAME = voidFunc}source="O0.bc:voidFunc:1:1""><node id="44" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>1</output></node><input index="0" source="44">1</input><node id="94" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="95" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="96" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="97" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>1</output></node><input index="0" source="97">1</input><node id="98" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>10</output></node><input index="1" source="98">10</input><output>true</output></node><input index="0" source="96">true</input></node><node id="99" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 3}"><node id="100" tags="LLVM_EXPRESSION, OR" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="101" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>1</output></node><input index="0" source="101">1</input><node id="102" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>32</output></node><input index="1" source="102">32</input><output>33</output></node><input index="0" source="100">33</input></node><node id="103" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 4}"><node id="104" tags="LLVM_EXPRESSION, SELECT" properties="{VALUE_TYPE = i32}"><node id="105" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="105">true</input><node id="106" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>33</output></node><input index="1" source="106">33</input><node id="107" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>1</output></node><input index="2" source="107">1</input><output>33</output></node><input index="0" source="104">33</input></node><node id="108" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="109" tags="LLVM_EXPRESSION, SDIV" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="110" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>33</output></node><input index="0" source="110">33</input><node id="111" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>2</output></node><input index="1" source="111">2</input><output>16</output></node><input index="0" source="109">16</input></node><node id="112" tags="LLVM_STATEMENT, STORE" properties="{BYTE_SIZE = 8}"><node id="113" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="113">Native Pointer</input><node id="114" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>16</output></node><input index="1" source="114">16</input></node><node id="115" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 6}"><node id="116" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="117" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>33</output></node><input index="0" source="117">33</input><node id="118" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="1" source="118">-1</input><output>false</output></node><input index="0" source="116">false</input></node></node><node id="119" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="120" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 6}"><output>false</output></node><input index="0" source="120">false</input><output>false</output></node><node id="72" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 10}"></node><node id="73" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"></node></node></node><node id="74" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 8}"><node id="75" tags="ADD, LLVM_EXPRESSION" properties="{nuw = true, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="76" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>3</output></node><input index="0" source="76">3</input><node id="77" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>1</output></node><input index="1" source="77">1</input><output>4</output></node><input index="0" source="75">4</input></node><node id="78" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 9}"><node id="79" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_EQUAL}"><node id="80" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>4</output></node><input index="0" source="80">4</input><node id="81" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>6</output></node><input index="1" source="81">6</input><output>false</output></node><input index="0" source="79">false</input></node></node><node id="82" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="83" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 9}"><output>false</output></node><input index="0" source="83">false</input><output>false</output></node><node id="84" tags="LLVM_STATEMENT, PHI" properties="{SSA_TARGETS = [3, 4]}"><node id="85" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 7}"><output>53</output></node><input index="0" source="85">53</input><node id="86" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>4</output></node><input index="1" source="86">4</input></node><node id="6" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 2}"><node id="7" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="8" tags="CALL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32, ARGS_COUNT = 1}"><node id="9" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32 (i32), LLVM_NAME = valueFunc}"><output>Managed Pointer(target = 'valueFunc')</output></node><input index="1" source="9">Managed Pointer(target = 'valueFunc')</input><node id="10" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>4</output></node><input index="0" source="10">4</input><node id="11" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = valueFunc, SOURCE_NAME = valueFunc}source="O0.bc:valueFunc:1:1""><node id="12" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>4</output></node><input index="0" source="12">4</input><node id="87" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="88" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="89" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_UNSIGNED_LESS_THAN}"><node id="90" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>4</output></node><input index="0" source="90">4</input><node id="91" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>5</output></node><input index="1" source="91">5</input><output>true</output></node><input index="0" source="89">true</input></node></node><node id="92" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="93" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="93">true</input><output>true</output></node><node id="20" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 1, BLOCK_NAME = 3}"><node id="21" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i64, TARGET_SSA_NAME = 4}"><node id="22" tags="CAST, LLVM_EXPRESSION" properties="{VALUE_TYPE = i64, SOURCE_TYPE = i32, CAST_KIND = sext}"><node id="23" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>4</output></node><input index="0" source="23">4</input><output>4</output></node><input index="0" source="22">4</input></node><node id="24" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32*, TARGET_SSA_NAME = 5}"><node id="25" tags="GETELEMENTPTR, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, SOURCE_TYPE = [5 x i32]*, IS_INBOUND = true, INDEX_TYPES = [i64, i64], INDEX_VALUES = [0, DYNAMIC]}"><node id="26" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = [5 x i32]*, LLVM_NAME = switch.table.valueFunc}"><output>Native Pointer</output></node><input index="0" source="26">Native Pointer</input><node id="27" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i64, SOURCE_SSA_NAME = 4}"><output>4</output></node><input index="1" source="27">4</input><output>Native Pointer</output></node><input index="0" source="25">Native Pointer</input></node><node id="28" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="29" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="30" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32*, SOURCE_SSA_NAME = 5}"><output>Native Pointer</output></node><input index="0" source="30">Native Pointer</input><output>0</output></node><input index="0" source="29">0</input></node></node><node id="31" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="32" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>0</output></node><input index="0" source="32">0</input><output>0</output></node><output>0</output></node><output>0</output></node><input index="0" source="8">0</input></node><node id="33" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="34" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="35" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="35">Native Pointer</input><output>16</output></node><input index="0" source="34">16</input></node><node id="36" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 7}"><node id="37" tags="ADD, LLVM_EXPRESSION" properties="{nuw = false, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="38" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>16</output></node><input index="0" source="38">16</input><node id="39" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>53</output></node><input index="1" source="39">53</input><output>69</output></node><input index="0" source="37">69</input></node><node id="40" tags="CALL, LLVM_STATEMENT" properties="{ARGS_COUNT = 1}"><node id="41" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = void (i32), LLVM_NAME = voidFunc}"><output>Managed Pointer(target = 'voidFunc')</output></node><input index="1" source="41">Managed Pointer(target = 'voidFunc')</input><node id="42" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>0</output></node><input index="0" source="42">0</input><node id="43" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = voidFunc, SOURCE_NAME = voidFunc}source="O0.bc:voidFunc:1:1""><node id="44" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>0</output></node><input index="0" source="44">0</input><node id="94" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="95" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="96" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="97" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>0</output></node><input index="0" source="97">0</input><node id="98" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>10</output></node><input index="1" source="98">10</input><output>true</output></node><input index="0" source="96">true</input></node><node id="99" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 3}"><node id="100" tags="LLVM_EXPRESSION, OR" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="101" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>0</output></node><input index="0" source="101">0</input><node id="102" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>32</output></node><input index="1" source="102">32</input><output>32</output></node><input index="0" source="100">32</input></node><node id="103" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 4}"><node id="104" tags="LLVM_EXPRESSION, SELECT" properties="{VALUE_TYPE = i32}"><node id="105" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="105">true</input><node id="106" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>32</output></node><input index="1" source="106">32</input><node id="107" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>0</output></node><input index="2" source="107">0</input><output>32</output></node><input index="0" source="104">32</input></node><node id="108" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="109" tags="LLVM_EXPRESSION, SDIV" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="110" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>32</output></node><input index="0" source="110">32</input><node id="111" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>2</output></node><input index="1" source="111">2</input><output>16</output></node><input index="0" source="109">16</input></node><node id="112" tags="LLVM_STATEMENT, STORE" properties="{BYTE_SIZE = 8}"><node id="113" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="113">Native Pointer</input><node id="114" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>16</output></node><input index="1" source="114">16</input></node><node id="115" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 6}"><node id="116" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="117" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>32</output></node><input index="0" source="117">32</input><node id="118" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="1" source="118">-1</input><output>false</output></node><input index="0" source="116">false</input></node></node><node id="119" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="120" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 6}"><output>false</output></node><input index="0" source="120">false</input><output>false</output></node><node id="72" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 10}"></node><node id="73" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"></node></node></node><node id="74" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 8}"><node id="75" tags="ADD, LLVM_EXPRESSION" properties="{nuw = true, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="76" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>4</output></node><input index="0" source="76">4</input><node id="77" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>1</output></node><input index="1" source="77">1</input><output>5</output></node><input index="0" source="75">5</input></node><node id="78" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 9}"><node id="79" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_EQUAL}"><node id="80" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>5</output></node><input index="0" source="80">5</input><node id="81" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>6</output></node><input index="1" source="81">6</input><output>false</output></node><input index="0" source="79">false</input></node></node><node id="82" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="83" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 9}"><output>false</output></node><input index="0" source="83">false</input><output>false</output></node><node id="84" tags="LLVM_STATEMENT, PHI" properties="{SSA_TARGETS = [3, 4]}"><node id="85" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 7}"><output>69</output></node><input index="0" source="85">69</input><node id="86" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>5</output></node><input index="1" source="86">5</input></node><node id="6" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 2}"><node id="7" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="8" tags="CALL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32, ARGS_COUNT = 1}"><node id="9" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32 (i32), LLVM_NAME = valueFunc}"><output>Managed Pointer(target = 'valueFunc')</output></node><input index="1" source="9">Managed Pointer(target = 'valueFunc')</input><node id="10" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>5</output></node><input index="0" source="10">5</input><node id="11" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = valueFunc, SOURCE_NAME = valueFunc}source="O0.bc:valueFunc:1:1""><node id="12" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>5</output></node><input index="0" source="12">5</input><node id="87" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="88" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="89" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_UNSIGNED_LESS_THAN}"><node id="90" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>5</output></node><input index="0" source="90">5</input><node id="91" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>5</output></node><input index="1" source="91">5</input><output>false</output></node><input index="0" source="89">false</input></node></node><node id="92" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="93" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>false</output></node><input index="0" source="93">false</input><output>false</output></node><node id="121" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 7}"></node><node id="122" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="123" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="0" source="123">-1</input><output>-1</output></node><output>-1</output></node><output>-1</output></node><input index="0" source="8">-1</input></node><node id="33" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 6}"><node id="34" tags="LLVM_EXPRESSION, LOAD" properties="{VALUE_TYPE = i32, BYTE_SIZE = 8}"><node id="35" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="35">Native Pointer</input><output>16</output></node><input index="0" source="34">16</input></node><node id="36" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 7}"><node id="37" tags="ADD, LLVM_EXPRESSION" properties="{nuw = false, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="38" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 6}"><output>16</output></node><input index="0" source="38">16</input><node id="39" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>69</output></node><input index="1" source="39">69</input><output>85</output></node><input index="0" source="37">85</input></node><node id="40" tags="CALL, LLVM_STATEMENT" properties="{ARGS_COUNT = 1}"><node id="41" tags="CONSTANT, GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = void (i32), LLVM_NAME = voidFunc}"><output>Managed Pointer(target = 'voidFunc')</output></node><input index="1" source="41">Managed Pointer(target = 'voidFunc')</input><node id="42" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>-1</output></node><input index="0" source="42">-1</input><node id="43" tags="FUNCTION, LLVM_STATEMENT" properties="{LLVM_NAME = voidFunc, SOURCE_NAME = voidFunc}source="O0.bc:voidFunc:1:1""><node id="44" tags="LLVM_EXPRESSION, READ_CALL_ARG" properties="{SSA_NAME = 0, ARGUMENT_INDEX = 0}"><output>-1</output></node><input index="0" source="44">-1</input><node id="94" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 0, BLOCK_NAME = 1}"><node id="95" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 2}"><node id="96" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="97" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>-1</output></node><input index="0" source="97">-1</input><node id="98" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>10</output></node><input index="1" source="98">10</input><output>true</output></node><input index="0" source="96">true</input></node><node id="99" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 3}"><node id="100" tags="LLVM_EXPRESSION, OR" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="101" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>-1</output></node><input index="0" source="101">-1</input><node id="102" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>32</output></node><input index="1" source="102">32</input><output>-1</output></node><input index="0" source="100">-1</input></node><node id="103" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 4}"><node id="104" tags="LLVM_EXPRESSION, SELECT" properties="{VALUE_TYPE = i32}"><node id="105" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 2}"><output>true</output></node><input index="0" source="105">true</input><node id="106" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 3}"><output>-1</output></node><input index="1" source="106">-1</input><node id="107" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 0}"><output>-1</output></node><input index="2" source="107">-1</input><output>-1</output></node><input index="0" source="104">-1</input></node><node id="108" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 5}"><node id="109" tags="LLVM_EXPRESSION, SDIV" properties="{nuw = false, nsw = false, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="110" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>-1</output></node><input index="0" source="110">-1</input><node id="111" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>2</output></node><input index="1" source="111">2</input><output>0</output></node><input index="0" source="109">0</input></node><node id="112" tags="LLVM_STATEMENT, STORE" properties="{BYTE_SIZE = 8}"><node id="113" tags="GLOBAL_READ, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32*, LLVM_NAME = glob}"><output>Native Pointer</output></node><input index="0" source="113">Native Pointer</input><node id="114" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 5}"><output>0</output></node><input index="1" source="114">0</input></node><node id="115" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 6}"><node id="116" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_SIGNED_LESS_THAN}"><node id="117" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>-1</output></node><input index="0" source="117">-1</input><node id="118" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>-1</output></node><input index="1" source="118">-1</input><output>false</output></node><input index="0" source="116">false</input></node></node><node id="119" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="120" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 6}"><output>false</output></node><input index="0" source="120">false</input><output>false</output></node><node id="72" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 2, BLOCK_NAME = 10}"></node><node id="73" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"></node></node></node><node id="74" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i32, TARGET_SSA_NAME = 8}"><node id="75" tags="ADD, LLVM_EXPRESSION" properties="{nuw = true, nsw = true, nnan = false, ninf = false, nsz = false, arcp = false, fast = false, exact = false}"><node id="76" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 4}"><output>5</output></node><input index="0" source="76">5</input><node id="77" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>1</output></node><input index="1" source="77">1</input><output>6</output></node><input index="0" source="75">6</input></node><node id="78" tags="LLVM_STATEMENT, SSA_WRITE" properties="{VALUE_TYPE = i1, TARGET_SSA_NAME = 9}"><node id="79" tags="ICMP, LLVM_EXPRESSION" properties="{VALUE_TYPE = i1, ICMP_KIND = INT_EQUAL}"><node id="80" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 8}"><output>6</output></node><input index="0" source="80">6</input><node id="81" tags="CONSTANT, LITERAL, LLVM_EXPRESSION" properties="{VALUE_TYPE = i32}"><output>6</output></node><input index="1" source="81">6</input><output>true</output></node><input index="0" source="79">true</input></node></node><node id="82" tags="BR, LLVM_CONTROL_FLOW, LLVM_STATEMENT" properties="{}"><node id="83" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i1, SOURCE_SSA_NAME = 9}"><output>true</output></node><input index="0" source="83">true</input><output>true</output></node><node id="124" tags="BLOCK, LLVM_STATEMENT" properties="{BLOCK_ID = 1, BLOCK_NAME = 1}"></node><node id="125" tags="LLVM_CONTROL_FLOW, LLVM_STATEMENT, RET" properties="{VALUE_TYPE = void}"><node id="126" tags="LLVM_EXPRESSION, SSA_READ" properties="{VALUE_TYPE = i32, SOURCE_SSA_NAME = 7}"><output>85</output></node><input index="0" source="126">85</input><output>85</output></node><output>85</output></node>